include_guard()

macro( add_deprecated_boolvar varname docstr newvarname newvardefaultval maptrueval mapfalseval )
  set( "${varname}" UNSET CACHE STRING "${docstr} (deprecated, use ${newvarname} instead)" )
  if ( NOT "x${${varname}}" STREQUAL "xUNSET" )
    message( WARNING "The ${varname} option is deprecated, please stop using it and instead use the new ${newvarname} instead.")
    if ( NOT "x${newvardefaultval}" STREQUAL "x${${newvarname}}" )
      message( FATAL_ERROR "Do not set both ${newvarname} and its deprecated older incarnation ${varname}" )
    endif()
    if ( "${${varname}}" )
      set( ${newvarname} "${maptrueval}" )
    else()
      set( ${newvarname} "${mapfalseval}" )
    endif()
    set( ${varname} "_do_not_use_" )
  endif()
endmacro()

macro( enum_option varname docstr defaultvalue )
  #To add an option MYOPTION which can only have values, A, B, C, D, or E, write
  #(the first option becomes the default value, here "A"):
  #  enum_option( MYOPTION "Bla bla." A B C D E )
  set(_tmp_allvals "${defaultvalue}" ${ARGN} )
  set( ${varname} "${defaultvalue}" CACHE STRING "${docstr}" )
  set_property( CACHE ${varname} PROPERTY STRINGS ${_tmp_allvals} )
  if ( NOT "${${varname}}" IN_LIST _tmp_allvals )
    message( FATAL_ERROR "Option ${varname} has forbidden value \"${${varname}}\" (must be one of: ${_tmp_allvals})")
  endif()
endmacro()
