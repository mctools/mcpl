name: pypi

on:
  push:
  pull_request:

jobs:
  preparations:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          path: src
          #Workaround for https://github.com/actions/checkout/issues/1467:
          ref: ${{ github.ref }}
          fetch-tags: true

      - name: Setup python
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55
        with:
          python-version: '3.12'

      - name: Pip install packages for mcpldevtool
        run: pip install -r ./src/devel/reqs/requirements_devel.txt

      - name: mcpldevtool checks
        run: ./src/devel/bin/mcpldevtool check -n "fix""me"

      - name: Check if dryrun
        env:
          EVT_IS_VTAG: ${{ startsWith(github.ref, 'refs/tags/v') && 'yes' || 'no' }}
        id: dryrun_check
        run: |
          set -eux
          echo "EVT_IS_VTAG: ${EVT_IS_VTAG}"
          if [ "x${EVT_IS_VTAG}" == "xyes" ]; then
              (./src/devel/bin/mcpldevtool verifytag --fail-if-devel -p 'vX.Y.Z' --file-verify=VERSION > /dev/null) && RES=0 || RES=1
          else
              RES=1
          fi
          echo "Dryrun: ${RES}"
          echo "status=${RES}" >> $GITHUB_OUTPUT

      - name: Determine version number
        id: version-number
        env:
          IS_DRYRUN: ${{ steps.dryrun_check.outputs.status }}
        run: |
          set -eux
          if [ "x${IS_DRYRUN}" == "x0" ]; then
              echo "Not a dryrun so verifying both the version tag and the VERSION file"
              VERSIONSTR=$(./src/devel/bin/mcpldevtool verifytag --fail-if-devel -p 'vX.Y.Z' --file-verify=VERSION)
          else
              echo "Dryrun so taking version from the VERSION file"
              VERSIONSTR=$(cat ./src/VERSION)
          fi
          echo "Extracted version str: '${VERSIONSTR}'"
          echo "version_number=$VERSIONSTR" >> $GITHUB_OUTPUT

    outputs:
      mcplversion: ${{ steps.version-number.outputs.version_number }}
      dryrun: ${{ steps.dryrun_check.outputs.status }}
      platforms: '[ "ubuntu-latest", "macos-latest", "windows-latest","ubuntu-24.04-arm", "macos-13" ]'


  basic_functionality_test:
    #Very basic testing only, we might have decided to publish a release even
    #with some tests showing spurious failures or similar. However, we always
    #tell users that "nctool --test" can be used to test that everything works,
    #so at least that should always work.
    needs: [ preparations ]
    strategy:
      matrix:
        os: ${{ fromJson(needs.preparations.outputs.platforms) }}
    name: ${{ matrix.os }} / test
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          path: src

      - name: Setup python
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55
        with:
          python-version: '3.12'

      - name: Enable parallel cmake
        run: python ./src/devel/bin/mcpldevtool nprocs --enable-github-parallel

      - name: Pip install mcpl-core
        run: pip install ./src/mcpl_core

      - name: Pip install mcpl-python
        run: pip install ./src/mcpl_python

      - name: Pip install mcpl
        run: pip install ./src/mcpl_metapkg

      - name: mcpltool simple test
        run: mcpltool "./src/examples/example.mcpl"

      - name: pymcpltool simple test
        run: pymcpltool "./src/examples/example.mcpl"

      - name: python module test
        run: python -c 'import mcpl'

      - run: pip install scikit-build-core

      - name: Pip install mcpl-extra
        run: pip install ./src/mcpl_extra --no-build-isolation

      - run: ssw2mcpl --help
      - run: mcpl2ssw --help
      - run: phits2mcpl --help
      - run: mcpl2phits --help
      - run: mcpl2phits "./src/examples/example.mcpl" "myphits.dmp"
      - run: phits2mcpl "myphits.dmp" "dummy.mcpl"


  build_sdists:
    name: Build source distribution
    runs-on: ubuntu-latest
    needs: preparations
    env:
      SDIST_SUFFIX: "-${{ needs.preparations.outputs.mcplversion }}.tar.gz"

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: build mcpl-core sdist
        run: pipx run build --sdist ./mcpl_core

      - name: build mcpl-python sdist
        run: pipx run build --sdist ./mcpl_python

      - name: build mcpl-metapkg sdist
        run: pipx run build --sdist ./mcpl_metapkg

      - name: register mcpl-core sdist
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: sdist-mcpl-core
          path: ./mcpl_core/dist/mcpl_core${{ env.SDIST_SUFFIX }}
          if-no-files-found: error

      - name: register mcpl-python sdist
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: sdist-mcpl-python
          path: ./mcpl_python/dist/mcpl_python${{ env.SDIST_SUFFIX }}
          if-no-files-found: error

      - name: register mcpl-metapkg sdist
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: sdist-mcpl-metapkg
          path: ./mcpl_metapkg/dist/mcpl${{ env.SDIST_SUFFIX }}
          if-no-files-found: error

      #For technical reasons, all build dependencies must be available even when
      #building an sdist. Thus, to build the mcpl-extra sdist we need to have
      #the mcpl-core package available. Thus we set PIP_FIND_LINKS to point at
      #the mcpl-core sdist we have just created, and the mcpl-extra sdist build
      #will then actually build and install mcpl-core from that.

      - name: build mcpl-extra sdist
        env:
          PIP_FIND_LINKS: ./mcpl_core/dist
        run: pipx run build --sdist ./mcpl_extra

      - name: register mcpl-extra sdist
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: sdist-mcpl-extra
          path: ./mcpl_extra/dist/mcpl_extra${{ env.SDIST_SUFFIX }}
          if-no-files-found: error

    outputs:
      sdistname_core: mcpl_core${{ env.SDIST_SUFFIX }}
      sdistname_python: mcpl_python${{ env.SDIST_SUFFIX }}
      sdistname_metapkg: mcpl${{ env.SDIST_SUFFIX }}
      sdistname_extra: mcpl_extra${{ env.SDIST_SUFFIX }}

  build_pure_wheels:
    name: Build pure wheels
    runs-on: ubuntu-latest
    needs: [ preparations, build_sdists ]

    steps:
      - name: download mcpl-python sdist
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: sdist-mcpl-python
          path: ./sdist-python

      - name: download mcpl-metapkg sdist
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: sdist-mcpl-metapkg
          path: ./sdist-metapkg

      - name: build mcpl-python pure wheel
        run: |
          set -eux
          mkdir tmp_wheelbld_python
          cd tmp_wheelbld_python
          tar xf ../sdist-python/${{needs.build_sdists.outputs.sdistname_python }}
          pipx run build --wheel ./mcpl_python-${{ needs.preparations.outputs.mcplversion }} --outdir=../dist-mcpl-python

      - name: build mcpl-metapkg pure wheel
        run: |
          set -eux
          mkdir tmp_wheelbld_metapkg
          cd tmp_wheelbld_metapkg
          tar xf ../sdist-metapkg/${{needs.build_sdists.outputs.sdistname_metapkg }}
          pipx run build --wheel ./mcpl-${{ needs.preparations.outputs.mcplversion }} --outdir=../dist-mcpl-metapkg

      - name: register mcpl-python pure wheel
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: wheel-mcpl-python
          path: ./dist-mcpl-python/mcpl_python-${{ needs.preparations.outputs.mcplversion }}-py3-none-any.whl
          if-no-files-found: error

      - name: register mcpl-metapkg pure wheel
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: wheel-mcpl-metapkg
          path: ./dist-mcpl-metapkg/mcpl-${{ needs.preparations.outputs.mcplversion }}-py3-none-any.whl
          if-no-files-found: error

  build_core_wheels:
    #Based on
    #https://github.com/pypa/cibuildwheel/blob/main/examples/github-minimal.yml,
    #where we should check if something needs updating once in a while
    #(especially with respect to the hardcoded matrix.os list.
    needs: [ preparations, build_sdists ]
    strategy:
      matrix:
        os: ${{ fromJson(needs.preparations.outputs.platforms) }}
    name: ${{ matrix.os }} / mcpl-core wheels
    runs-on: ${{ matrix.os }}

    env:
      SDIST_PATH: "./sdist/${{ needs.build_sdists.outputs.sdistname_core }}"

    steps:
      - name: download mcpl-core sdist
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: sdist-mcpl-core
          path: ./sdist

      - name: Look in sdist dir (unix)
        if: runner.os != 'Windows'
        run: ls -l "${SDIST_PATH}"

      - name: Verify presence of sdist (unix)
        if: runner.os != 'Windows'
        run: test -f "${SDIST_PATH}"

      # Run cibuildwheel. Both in default mode, and with additional steps for
      # manylinux2014 wheels.
      #
      # Additionally, also try to make windows-arm64 wheels through cross
      # compilation.

      - name: cibuildwheel
        uses: pypa/cibuildwheel@5f22145df44122af0f5a201f93cf0207171beca7
        env:
          CIBW_ARCHS_WINDOWS: "auto64 ARM64"
        with:
          package-dir: ${{ env.SDIST_PATH }}
          output-dir: wheelhouse

      - name: cibuildwheel manylinux2014
        uses: pypa/cibuildwheel@5f22145df44122af0f5a201f93cf0207171beca7
        if: runner.os == 'Linux'
        env:
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
        with:
          package-dir: ${{ env.SDIST_PATH }}
          output-dir: wheelhouse

      - name: list wheelhouse (unix)
        if: runner.os != 'Windows'
        run: ls -l ./wheelhouse/

      - name: list wheelhouse (windows)
        if: runner.os == 'Windows'
        run: dir wheelhouse

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: mcpl-core-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/mcpl_core-*.whl
          if-no-files-found: error

  build_extra_wheels:
    #Based on
    #https://github.com/pypa/cibuildwheel/blob/main/examples/github-minimal.yml,
    #where we should check if something needs updating once in a while
    #(especially with respect to the hardcoded matrix.os list.
    needs: [ preparations, build_sdists ]
    strategy:
      matrix:
        os: ${{ fromJson(needs.preparations.outputs.platforms) }}
    name: ${{ matrix.os }} / mcpl-extra wheels
    runs-on: ${{ matrix.os }}

    env:
      SDIST_PATH: "./sdist/${{ needs.build_sdists.outputs.sdistname_extra }}"
      SDIST_CORE_PATH: "${{ github.workspace }}/sdist_core/${{ needs.build_sdists.outputs.sdistname_core }}"

    steps:

      # Run cibuildwheel. Both in default mode, and with additional steps for
      # manylinux2014 wheels.
      #
      # Additionally, also try to make windows-arm64 wheels through cross
      # compilation.
      #
      # We use PIP_FIND_LINKS to make sure the mcpl-extra build env will use the
      # associated mcpl-core package, and we override the REPAIR_WHEEL commands
      # to ensure we do not get an error or inadvertently bundle libmcpl.so.

      - name: download mcpl-extra sdist
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: sdist-mcpl-extra
          path: ./sdist

      - name: download mcpl-core sdist
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: sdist-mcpl-core
          path: ./sdist_core

      - name: Let CIBW-PIP find mcpl-core sdist
        shell: python
        run: |
          import pathlib
          import os
          d = pathlib.Path('sdist_core').absolute()
          assert d.is_dir()
          if '${{ runner.os }}' == 'Linux':
              d = f'/host{d}' # Host filesystem in containers is mounted at /host
          elif '${{ runner.os }}' == 'Windows':
              d = str(d).replace('\\','/') # Avoid problematic backslashes
          with pathlib.Path(os.environ['GITHUB_ENV']).open('at') as fh:
              fh.write(f'CIBW_ENVIRONMENT=PIP_FIND_LINKS={d}\n')

      - name: Prevent libmcpl.so in mcpl-extra wheel (Linux)
        if: runner.os == 'Linux'
        run: echo 'CIBW_REPAIR_WHEEL_COMMAND_LINUX=auditwheel repair -w {dest_dir} {wheel} --exclude "libmcpl*"' >> $GITHUB_ENV

      - name: Prevent libmcpl.so in mcpl-extra wheel (MacOS)
        if: runner.os == 'macOS'
        #NOTE: --ignore-missing-dependencies is not a great solution! But at least we have code below testing the wheels!
        run: echo 'CIBW_REPAIR_WHEEL_COMMAND_MACOS=delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel} --exclude libmcpl --ignore-missing-dependencies' >> $GITHUB_ENV

      - name: cibuildwheel
        uses: pypa/cibuildwheel@5f22145df44122af0f5a201f93cf0207171beca7
        env:
          CIBW_ARCHS_WINDOWS: "auto64 ARM64"

        with:
          package-dir: ${{ env.SDIST_PATH }}
          output-dir: wheelhouse

      - name: cibuildwheel manylinux2014
        uses: pypa/cibuildwheel@5f22145df44122af0f5a201f93cf0207171beca7
        if: runner.os == 'Linux'
        env:
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014

        with:
          package-dir: ${{ env.SDIST_PATH }}
          output-dir: wheelhouse

      - name: list wheelhouse (unix)
        if: runner.os != 'Windows'
        run: ls -l ./wheelhouse/

      - name: list wheelhouse (windows)
        if: runner.os == 'Windows'
        run: dir wheelhouse

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: mcpl-extra-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/mcpl_extra-*.whl
          if-no-files-found: error

  collect_output:
    name: Collect all output
    needs: [ preparations, build_sdists, build_pure_wheels, build_core_wheels, build_extra_wheels ]
    runs-on: ubuntu-latest
    steps:
      # sdists:
      - name: download mcpl-core sdist
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: sdist-mcpl-core
          path: ./dist_core

      - name: download mcpl-extra sdist
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: sdist-mcpl-extra
          path: ./dist_extra

      - name: download mcpl-python sdist
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: sdist-mcpl-python
          path: ./dist_python

      - name: download mcpl-metapkg sdist
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: sdist-mcpl-metapkg
          path: ./dist_metapkg

      # pure wheels:
      - name: download mcpl-python pure wheel
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: wheel-mcpl-python
          path: ./dist_python

      - name: download mcpl-metapkg pure wheel
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: wheel-mcpl-metapkg
          path: ./dist_metapkg

      # binary wheels (merge-multiple: true since produced in several jobs):
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          pattern: "mcpl-core-wheels-*"
          merge-multiple: true
          path: ./dist_core

      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          pattern: "mcpl-extra-wheels-*"
          merge-multiple: true
          path: ./dist_extra

      # Verify:
      - name: List files
        run: |
          find ./dist_core
          find ./dist_python
          find ./dist_metapkg
          find ./dist_extra

      - name: Verify presence of expected mcpl-core and mcpl-extra files
        shell: python
        run: |
          import pathlib
          versionstr = '${{ needs.preparations.outputs.mcplversion }}'
          def expected_keys(name):
              keys = [
                  "macosx_10_9_x86_64",
                  "macosx_11_0_arm64",
                  "win_amd64",
                  "win_arm64",
                  "musllinux_1_2_x86_64",
                  "musllinux_1_2_aarch64",
                  "manylinux2014_aarch64.manylinux_2_17_aarch64.manylinux_2_28_aarch64",
                  "manylinux2014_aarch64.manylinux_2_17_aarch64",
                  "manylinux2014_x86_64.manylinux_2_17_x86_64.manylinux_2_28_x86_64",
                  "manylinux2014_x86_64.manylinux_2_17_x86_64",
              ]
              return keys
          def testpkg(name):
              print(f"==> Investigating mcpl-{name}")
              assert name in ('core','extra')
              pdir = pathlib.Path(f'./dist_{name}').absolute()
              prefix = f'mcpl_{name}-{versionstr}-py3-none-'
              expected_files = set([ f'{prefix}{key}.whl' for key in expected_keys(name) ])
              expected_files.add(f'mcpl_{name}-{versionstr}.tar.gz')
              actual_files = set(f.name for f in pdir.iterdir())
              errmsgs = []
              if expected_files - actual_files:
                  errmsgs.append('Missing files: %s'%sorted(expected_files - actual_files))
              if actual_files - expected_files :
                  errmsgs.append('Unexpected files: %s'%sorted(actual_files - expected_files))
              if errmsgs:
                  for e in errmsgs:
                      print(f"ERROR mcpl-{name}: {e}")
                  return False
              print("Found exactly the expected files:")
              for f in sorted(expected_files):
                  print(f'  {f}')
              return True
          ok1 = testpkg('core')
          ok2 = testpkg('extra')
          if not ( ok1 and ok2 ):
              raise SystemExit("Errors detected")

      - name: Verify presence of expected mcpl-python files
        run: |
          set -eux
          test -f ./dist_python/mcpl_python-${{ needs.preparations.outputs.mcplversion }}.tar.gz
          test -f ./dist_python/mcpl_python-${{ needs.preparations.outputs.mcplversion }}-py3-none-any.whl

      - name: Verify presence of expected mcpl-metapkg files
        run: |
          set -eux
          test -f ./dist_metapkg/mcpl-${{ needs.preparations.outputs.mcplversion }}.tar.gz
          test -f ./dist_metapkg/mcpl-${{ needs.preparations.outputs.mcplversion }}-py3-none-any.whl

      - name: List files
        run: |
          find ./dist_core
          find ./dist_python
          find ./dist_metapkg
          find ./dist_extra

      - name: Combine in one dir
        run: |
          mkdir ./dist_final
          cp ./dist_core/mcpl_core-* ./dist_final
          cp ./dist_python/mcpl_python-* ./dist_final
          cp ./dist_metapkg/mcpl-* ./dist_final
          cp ./dist_extra/mcpl_extra-* ./dist_final

      - name: List files
        run: find ./dist_final

      - name: Package artifacts
        run: tar cvzf final.tar.gz ./dist_final

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: final
          path: ./dist_final
          if-no-files-found: error

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: final-tarball
          path: final.tar.gz
          if-no-files-found: error

  test_wheels:
    needs: [ preparations, collect_output ]
    strategy:
      matrix:
        os: ${{ fromJson(needs.preparations.outputs.platforms) }}
    name: "${{ matrix.os }} / test wheels"
    runs-on: ${{ matrix.os }}
    steps:

      - name: download artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: final
          path: ./dist_final

      - name: Setup python
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55
        with:
          python-version: '3.12'

      - name: Analyse wheel files
        shell: python
        run: |
          import pathlib
          import pathlib
          import os.path
          from zipfile import ZipFile
          wheel_dir = pathlib.Path('.').joinpath('dist_final')
          errors = [False]
          def zip_content( p ):
              with ZipFile(p, 'r') as fh:
                  return fh.namelist()
          def validate_wheel( wheelfile, exceptions = None ):
              assert wheelfile.is_file()
              for fn in zip_content(wheelfile):
                  bnl = os.path.basename(fn).lower()
                  if any(bnl.endswith(e) for e in ('.dll','.dylib','.so','.a','.o','.exe')):
                      if exceptions and bnl in exceptions:
                          print(f"Found allowed binary in {wheelfile.name}: {fn}")
                      else:
                          errors[0] = True
                          print(f"Forbidden binary found in {wheelfile.name}: {fn}")
              return not errors
          def val( globpattern, exceptions = None ):
              wfs = sorted(wheel_dir.rglob(globpattern))
              assert wfs
              for f in wfs:
                  validate_wheel(f,exceptions)
          val( 'mcpl_core-*.whl',
               ['libmcpl.so','libmcpl.dylib','mcpl.lib','mcpl.dll',
                'mcpl-config.exe','mcpltool.exe'] )
          val( 'mcpl_extra-*.whl',
               [ 'ssw2mcpl.exe','mcpl2ssw.exe','phits2mcpl.exe','mcpl2phits.exe'] )
          val( 'mcpl-*.whl')
          val( 'mcpl_python-*.whl')
          if errors[0]:
              raise SystemExit('Errors detected')

      - name: Pip install wheels
        env:
          PIP_FIND_LINKS: ./dist_final
        run: pip install "mcpl==${{ needs.preparations.outputs.mcplversion }}" "mcpl-extra==${{ needs.preparations.outputs.mcplversion }}"

      - run: mcpl-config -s
      - run: mcpltool --help
      - run: pymcpltool --help
      - run: ssw2mcpl --help
      - run: mcpl2ssw --help
      - run: phits2mcpl --help
      - run: mcpl2phits --help

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          path: src

      - run: mcpltool "./src/examples/example.mcpl"
      - run: pymcpltool "./src/examples/example.mcpl"
      - run: mcpl2phits "./src/examples/example.mcpl" "myphits.dmp"
      - run: phits2mcpl "myphits.dmp" "dummy.mcpl"

  publish_to_pypi:
    name: Publish to pypi
    needs: [ preparations, collect_output, test_wheels, basic_functionality_test ]
    runs-on: ubuntu-latest
    permissions:
      id-token: write # IMPORTANT: this permission is mandatory for trusted publishing
    steps:

      - name: download artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: final
          path: ./dist_final

      - name: List files
        run: ls -l ./dist_final

      - name: Upload distribution to PyPI (if not dryrun)
        if: needs.preparations.outputs.dryrun == '0'
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc
        with:
          packages-dir: ./dist_final
          verbose: true
