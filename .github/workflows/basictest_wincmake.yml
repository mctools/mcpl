name: basictest_wincmake

on:
  push:
  pull_request:

jobs:
  mcpldevtool_check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: src
      - name: Enable parallel cmake
        run: python ./src/devel/bin/mcpldevtool nprocs --enable-github-parallel
      - name: Pip install packages for mcpldevtool
        run: pip install -r ./src/devel/reqs/requirements_devel.txt
      - name: mcpldevtool checks
        run: ./src/devel/bin/mcpldevtool check -n "fix""me"

  build:
    needs: [ mcpldevtool_check ]
    # More platform information available on:
    # https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md
    #
    # Nov-2024: windows-latest is windows-2022. We should try to exercise
    # clang/gcc on this platform, and add a conda-based test.

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019, windows-2022, win-11-arm]

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: src

    - name: Setup python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Enable parallel cmake
      run: python ./src/devel/bin/mcpldevtool nprocs --enable-github-parallel

      #NB: We don't test matplotlib import here in the next step, since we want
      #to make sure that our CTest infrastructure correctly avoids problems from
      #"building font cache" printouts on first imports.
    - name: pip install extra deps
      shell: cmd
      run: python -mpip install -r .\src\devel\reqs\requirements_devel.txt

    - name: CMake cfg
      shell: cmd
      run: >
        cmake -B build src
        -DMCPL_ENABLE_TESTING=ON
        -DMCPL_BUILD_STRICT=ON
        "-DCMAKE_INSTALL_PREFIX=./mcplinstall"
        -DMCTOOLS_REQUIRE_ALL_TEST_DEPS=ON

      #NB: More verbosity by appending: "-- /verbosity:detailed":
    - name: CMake build (Release)
      shell: cmd
      run: cmake --build build --config Release -j 3

    - name: CMake build (Debug)
      shell: cmd
      run: cmake --build build --config Debug -j 3

      #NB more verbosity by appending: "-VV":
    - name: Run CTests (Release)
      run: ctest --test-dir ./build  --build-config Release --no-tests=error --output-on-failure --test-output-size-failed 100000 --test-output-truncation middle

    - name: Run CTests (Debug)
      run: ctest --test-dir ./build  --build-config Release --no-tests=error --output-on-failure --test-output-size-failed 100000 --test-output-truncation middle

    - name: CMake install (Release)
      shell: cmd
      run: cmake --install build --config Release

    - name: Setup environment
      shell: python
      run: |
        import pathlib
        import os
        v = pathlib.Path('.').joinpath('mcplinstall','bin')
        vo = os.environ.get('PATH')
        v = '%s%s%s'%(v,os.pathsep,vo) if vo else v
        v = f'PATH={v}\n'
        with pathlib.Path(os.environ['GITHUB_ENV']).open('at') as f:
            print(f"Setting: {v}")
            f.write(v)

    - name: Run mcpl-config -s
      shell: cmd
      run: mcpl-config -s

    - name: Run mcpltool --help
      shell: cmd
      run: mcpltool --help

    - name: Cfg downstream
      #For fun, always use Release config here, to test that it works even if
      #using a different build type than mcpl itself:
      run: cmake -S "./src/examples/downstream_cmake" -B "./build_ds" "-DCMAKE_INSTALL_PREFIX=./install_ds"

    - name: Build downstream
      run: cmake --build ./build_ds  --config Release

    - name: Install downstream
      run: cmake --install ./build_ds  --config Release

    - name: Run downstream
      run: ./install_ds/bin/testapp ./src/examples/example.mcpl
