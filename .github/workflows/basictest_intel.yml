name: basictest_intel

on:
  push:
  pull_request:

jobs:
  mcpldevtool_check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: src
      - name: Enable parallel cmake
        run: python ./src/devel/bin/mcpldevtool nprocs --enable-github-parallel
      - name: Pip install packages for mcpldevtool
        run: pip install -r ./src/devel/reqs/requirements_devel.txt
      - name: mcpldevtool checks
        run: ./src/devel/bin/mcpldevtool check -n "fix""me"

  build_and_test:
    needs: [ mcpldevtool_check ]

    runs-on: ubuntu-22.04
    #Note March 2025: ubuntu-20.04 was retired, so updated to next oldest
    #                 (ubuntu-22.04). This time it seemed to work!
    #Old note: August 2024 the intel oneapi compilers did not work on ubuntu-22.04
    #or ubuntu-latest. This is most likely because these platforms are using a
    #too new c++ library from gcc, for which the intel compilers have not been
    #updated. Or something like that.

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: src

    - name: add oneAPI to apt
      run: |
        cd /tmp
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        sudo add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"

    - name: apt update
      run: sudo apt update

    - name: install oneAPI dpcpp compiler
      run: sudo apt install intel-oneapi-compiler-dpcpp-cpp

    - name: install oneAPI runtime libs
      run: sudo apt install intel-oneapi-runtime-libs

    - name: Setup python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Enable parallel cmake
      run: python ./src/devel/bin/mcpldevtool nprocs --enable-github-parallel

      #NB: We don't test matplotlib import here in the next step, since we want
      #to make sure that our CTest infrastructure correctly avoids problems from
      #"building font cache" printouts on first imports.
    - name: pip install extra deps
      run: python3 -mpip install -r ./src/devel/reqs/requirements_devel.txt

    - name: Configure CMake
      run: |
        source /opt/intel/oneapi/setvars.sh
        #NB: We could use
        #        -DCMAKE_CXX_COMPILER=icpx
        #        -DCMAKE_C_COMPILER=icx
        #But just because it seems to be something that might be useful. we do:
        export CC=$(which icx)
        export CXX=$(which icpx)
        cmake \
        -S ./src \
        -B ./build \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=./install \
        -DMCPL_BUILD_STRICT=ON \
        -DMCPL_ENABLE_TESTING=ON \
        -DMCTOOLS_REQUIRE_ALL_TEST_DEPS=ON

        #Flags that we didn't need:
        #        -DIntelDPCPP_DIR="/opt/intel/oneapi/compiler/latest/linux/cmake/SYCL"
        #        -DMKL_ROOT="/opt/intel/oneapi/mkl/latest"
        #        -DTBB_ROOT="/opt/intel/oneapi/tbb/latest"

    - name: Build
      run: >
        source /opt/intel/oneapi/setvars.sh &&
        cmake --build ./build --config Release

    - name: CTest
      run: ctest --test-dir ./build --no-tests=error --output-on-failure --test-output-size-failed 100000 --test-output-truncation middle

    - name: Install
      run: source /opt/intel/oneapi/setvars.sh && cmake --install ./build

    - name: Test installed
      run: |
        source /opt/intel/oneapi/setvars.sh
        set -eux
        #Expose mcpl-config and examples:
        export PATH="${PWD}/install/bin:${PATH:-}"
        #Add python modules and cmdline scripts:
        pip install ./src/mcpl_python
        mcpl-config --summary
        mcpltool --help
        pymcpltool --help
        mcpltool ./src/examples/example.mcpl
        pymcpltool ./src/examples/example.mcpl
        pymcpltool --stats ./src/examples/example.mcpl
        cp ./src/mcpl_core/tests/src/app_testwritegzip/main.c ./my_c_code.c
        test -f $(mcpl-config --show libpath)
        test -d $(mcpl-config --show libdir)
        cp ./src/examples/example.mcpl bla.mcpl
        gzip bla.mcpl
        mcpltool bla.mcpl.gz
        pymcpltool bla.mcpl.gz

        export CC=$(which icx)
        export CXX=$(which icpx)

        #NOTE: Important that build flags comes AFTER the code being
        #compiled. Otherwise mcpl symbols will be initially ignored, leading
        #to errors later:
        $CC -std=c11 my_c_code.c $(mcpl-config --show buildflags) -o my_c_app
        ./my_c_app
        echo "Custom compilation of downstream C++ code succeeded"
